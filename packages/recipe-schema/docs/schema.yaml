---

# What --------------------
# At the top level of a recipe is everything required to execute a recipe to perfection.
# This does not include any secondary metadata like author or images. Those are added as
# their own top level metadata properties. The last top level item is partials and those
# are recipe modifiers either to add to or change the existing recipe with new information.
# 
# There are properties with calculated values based on other properties. For example Tools,
# Cost, Total Time, Nutrition are based on ->
#   - preparations, variants, components and steps
# 
# Note: Calculated values can be calculated at compile time or runtime. It is up to the 
# processor as to how it is done. I make no prescriptions of how it is done.
# 
# Purposes: ----------------
# 1. To create a structured and easy to ready recipe schema.
# 2. A way to create and maintain that schema programatically.
# 3. A way to validate YAML/JSON recipes to make sure they follow the schema.
# 
# More info: --------------
#   - https://psu.pb.unizin.org/hmd329/chapter/chapter-6-standardized-recipes/
#   - https://www.complianceonline.com/dictionary/HACCP/The-HACCP-Seven-Principles.html
#   - https://whatscookingamerica.net/information/whatisarecipe.htm
#   - https://www.thekitchn.com/how-to-write-a-recipe-58522
#   - https://www.theculinarypro.com/about-recipes
#   - https://en.wikipedia.org/wiki/Recipe#Components
#   - http://www.selfpublishacookbook.com/info/how-to-write-cookbook/more/components-to-a-recipe
#   - https://www.sps186.org/downloads/basic/628287/Parts%20of%20a%20Recipe-Following%20Recipes%20and%20Directions%20(3).pdf
#   - https://www.theculinarypro.com/culinary-math-science-and-food-safety
#   - https://github.com/geraintluff/schema-org-gen/blob/master/schema.org/Recipe.json
#   - https://github.com/geraintluff/schema-org-gen/blob/master/schema.org/NutritionInformation.json
# 
# Nice to haves: ----------
#   - It would be dope if I could have links parsed out of content
#     - For instance in the techniques section it might say "chiffonade cut" it could auto
#       link it
#   - A flavor table/api
#   - A techniques table/api
#   - A nutrition table/api to auto build the nutrition tables
# 
# @basedOn: ---------------
# https://schema.org/Recipe
---
# General schema stuff
schema: # The schema definition
# version: # The version of the schema used
# type: 
  $ref: '#/definitions/types/document'

# Describing the metadata. Useful for websites, descriptions etc
about: 
  # name: # The name of the recipe. On a website this would be the title, for instance.
  # alternates: # Other names that this recipe is ALSO known by.
  #   - $ref: '#/definitions/link' # Either a link or text.
  # images: 
  #   hero: # The main/hero image for this resource. Extra sizes are not acceptable here.
  #     $ref: '#/definitions/image'
  #   gallery: # A list of -> #/definitions/image
  #     - $ref: '#/definitions/image'
  #     - $ref: '#/definitions/image'
  #     - $ref: '#/definitions/image'
  #   all: # A calculated value of all images from each aspect (include about.images* and partials)
  #     - $ref: '#/definitions/image'  
  # headnotes: # A synopsis of the recipe → https://t.ly/Otsc
  #   $ref: '#/definitions/description'
  # notes: # A notes and suggestions that typically appear at the end of a recipe.
  #   $ref: '#/definitions/description'
  # created: # The created date of the recipe in schema format.
  # published: # The original publish date of this recipe.
  # author: # The author of the recipe schema.
  #   $ref: '#/definitions/person'
  # originalAuthor: # The original author of the recipe
  #   $ref: '#/definitions/person'
  # units: # enum of allowed unit types ie metic, imperial, whatever else. Used for conversions.
  #   $ref: '#/definitions/types/units'
  # separator: # used to determine which radix symbol to use.
  # totalCost: # A calculated property of all the costs into one.
  #   $ref: '#/definitions/cost'
  #   per: # Calc all within partials as their own thing.
  #     component: 
  #       $ref: '#/definitions/cost'
  #     variants:
  #       $ref: '#/definitions/cost'
  # links: # An array of useful links that are related to this recipe that AREN'T a variation.

# These top level items are REQUIRED for it to be a recipe.
ingredients:
  - $ref: '#/definitions/ingredient'
  - $ref: '#/definitions/ingredient'

# An array of instructions on how to cook the recipe. This is a combination of the cook 
# instructions in here, the required variants, any inline alterations and all component
# steps. 
# 
# Note: Instructions can be nested but it is best if you don't.
instructions: 
  $ref: '#/definitions/instructions'

# TODO: This is the part that I have the most work to put into but is also super important.
# Need to do a bit more reading on this to make sure that I understand it fully so that I can
# make it as correct as possible.
yield: # Broken into 2 parts. The amount (so other values can be calculated later) and the text
       # Example output of the two props combined:
       #   - 1 loaf / 1 loaves
       #   - Loaves, 1
       #   - Loaves -> 1
  servings: # A numerical amount
  text: # Whatever it is eg: plate(s), loaf, bars.

# If the top-level isn't set then all the properties are calculated based on recipe & partials.
time: # this can be manually set otherwise they are calculated value.
  cook: # Total cook time.
  prep: # Total prep time.
  active: # Active time.
  inactive: # Inactive time.
  total: # Can be supplied otherwise it is a calculated value based on times from other areas.

# Not fully thought out but this could be another type of variant (or it is itself a variant)
# The intention is to be able to change (heighten, mute, remove) flavors and use complementary
# flavors in a recipe.
# 
# For instance a burger is great if it has a ton of umami but if it's to be sweeter then it
# would be amazing if the recipe could allow for that. The more I think about it the more
# sense that it makes to have this as a variant. Building the flavor DB is a whole 'nother
# issue entirely.
# 
# Very low priority.
flavors:
  desc: # A description of each flavor.

# Serving procedures (Served while warm/cold). Finish with serving instructions including how to
# plate, what temperature to serve, how to garnish
serving: 
  $ref: '#/definitions/description'
  # Follows the same structure as instructions except it has it's own hero image.
  # The renderer determines how this looks on the page. Could even be it's own page but it should,
  # at the very least, look like the instructions.
  plating:
    $ref: '#/definitions/instructions'
    image: # An image on how to [optionally] plate the dish/component.
      $ref: '#/definitions/image'

# How to store resulting food. If all components have "storing" value set then they should all 
# be available in some fashion or aother. It is not supported to set the storing procedure for all
# components manually here (let's say via component id).
# 
# The last instruction should be regarding storage, if applicable. For a cookie recipe, for example,
# “Cookies will keep at room temperature in an airtight container for 3-4 days.”
storing: 
  $ref: '#/definitions/description'

# PARTIALS
# A partial has all the same properties as a recipe. The intention is that they can be imported to
# append or change the parent recipe. Since all the properties are the same that means it is easy
# to create a partial. Keeps one in the same mindset. This flexibility also adds complexity and
# more power to hang oneself (I mention this in notes for a few of the partials and for full recipe
# "partial"). 
# 
# Each partial behaves in different ways but they are all other externally sourced (file, url)
# YAML/Markdown files that are applied to the existing recipe. The only thing about partials 
# how to create/have a unique ID to reference other partials. How/where they are stored and
# retrieval process therein.
# 
# Notes:
#   - All partial declarations within a recipe are arrays that point to a file/api somewhere.
#   - Each partial's behavior is different. Some append, some modify.
#   - Partials use URI Schemes to determine where to find the partial. Supported schemes:
#     - file://path/to/file.yaml
#     - url://host.io/path/to/resource.yaml
#     - db://host.io/connection/partials
#   - TODO: Type this up into TypeScript somehow and ENFORCE IT
# 
# --------- Equipment
# All the gear that is required for this app. Equipment can link to other partials and those
# will be pulled in. This appends everything together and groups them as well. The list is 
# de-duped based on IDs and ignores groups.
# 
# While equipment itself is a partial Equipment/tools can also exist in preparations, components
# or instructions and all those need to be pulled out and de-duped so that they can be listed
# easily. Also because it isn't required to list all tools manually under equipment nor it's 
# partials it allows authors to focus primarily on the recipe. Just add any gear, as it comes
# up during writing in the equipment section of the related area. They will be pulled out later
# for convenience.
# 
# --------- Preparations
# I want to be able to show not only the workstation but also what the end product is
# supposed to look like. I personally have the most issues here because this takes up a bunch
# of my time when getting things done. Having it all layed out for me before I even start is
# fantastic.
# 
# --------- Variations
# A variation is a recipe but merged with an existing one creating a new recipe but does not
# live on it's own or cannot be read as a recipe on it's own.
# 
# Variants are MERGED into the recipie. A variant is single use. ie they are merged into the
# recipe and only one variant can be applied at a time. From an integration standpoint it's
# like running a merge on two objects and the properties that have differences are applied
# (aka a deep merge).
# 
# If viewing on a website it'll change the url to have ?variant={{ID}} and it'll apply the
# changes to the content with links to more variants.
# 
# NOTE: A variation can be a full recipe. Meaning that all the properties of a recipe
# are filled out. For a variation that would be overkill and it would make more sense to create
# a new recipe.
# 
# --------- Alterations
# An alteration is an in-line recipie diff. So while it has changes to a recipe like a 
# variation these are view inline versus as a new recipe with the changes living on it's own.
# 
# The concept of an alteration is very, very similar to variations with the noticeable 
# difference being that alterations are view inline with the content versus a replacement.
# Think of a web client. If you click on "view alterations" it'll show the differences 
# between one step/ingrediant and another inline and there will be all the metadata associated
# with that ingrediant, links and why. It could show as a diff like on github or it could
# look like a modal/popup/tooltip instead.
# 
# Can also be used as "Suggestions"
# 
# --------- Components
# A component is a partial recipe. Meaning it does not have all the required properties of
# a recipe like 'type' or 'name'. All the fields are meant to be additions to another recipe.
# 
# A component is APPENDED to the existing schema for whatever existing properties exist on
# the component and recipe. For instance if a component has ingredients, preparations and
# variants then all these properties will be APPENDED to the existing recipe. This allows
# for authors to have their recipies organized in such a fashion that allows for resuable
# components.
# 
# 
# NOTE: A component can also be a full recipe. Meaning that all the properties of a recipe
# are filled out. For a variation that would be overkill and it would make more sense to create
# a new recipe.
# 
# --------- Full Recipe import.
# I add this in here as it is important to note that since a variation or component (type set to
# one or the other) and it would make sense that a full menu could be important. And they can but
# it is not a feature that I will suport in version 1.0. The behavior can be chosen as a flag as
# append or merge. Thing is, though, that if merge is chosen then it's like a variation. Authors
# must have some fore-thought about how to use any of the partial types.
partials: 
  equiptment:
    - $ref: '#/definitions/equiptment'

  # Setup your mise en place here
  preparations:
    - $ref: '#/definitions/preparations'

  # All the other recipies that are needed.
  components: 
    - $ref: '#/definitions/components'
  
  # Links to recipe variations where only the stuff that is required to change is changed.
  # This is a recipe partial as in it'll change a step
  variations: 
    - $ref: '#/definitions/variations'
  
  # Inline notes or changes to a recipe. Callouts if you will.
  alterations: 
    - $ref: '#/definitions/alterations'

# Related information
meta: 
  nutrition:
    $ref: https://schema.org/NutritionInformation
  suitableForDiet: 
    $ref: https://schema.org/RestrictedDiet
  cookingMethod:
    $ref: https://schema.org/cookingMethod # Not sure I need unless this is enriched with more structure.
  category:
    $ref: https://schema.org/recipeCategory
  cuisines: # multiple because a recipe could be a fusion.
    $ref: https://schema.org/recipeCuisine
  reviews: # This is low priority
    $ref: https://schema.org/review
  # taxonomies: 
  #   $ref: '#/definitions/taxonomies'

# Any internal definitions
definitions:
  # Type enums
  types:
    # Enum of instruction types allowed
    instruction: 
      - step: # an actual step
        $ref: '#/definitions/step'
      - tip: # Useful info, does not require to be done. 
        $ref: '#/definitions/stepTip'
      - section: # Grouping, contains child steps. 
        $ref: '#/definitions/stepSection'

    # alterations:
    #   - diff # Show a diff of the two recipes inline.
    #   - tooltip # A short note to tell the reader that there is a difference between this recipe and
    #             # the original. 
    #   - comment # A comment is just a different version of a tooltip so that an author has the power
    #             # to show comments and tooltips on a page. Typically this would be a long-form
    #             # tooltip
    
    # document:
    #   - recipe # A fully realized recipe
    #   - component # A comonent, could contain all the recipe properties or just some
    #   - variation # A variation, could contain all the recipe properties or just some
    #   - equipment # 
    #   - preparation # Preparation methods n' stuff
    #   - alteration # An alteration/tooltip etc

    # Get the type, then it's aliases and it's name. This should not live in this schema rather
    # on it's own and is linked to but I am documenting it anyway.
    unit:
      volume:
        tsp: 
          name: Teaspoon
          aliases: [t, tsp]
      mass: #same format as volume
      length: #same format as volume
      temperature: #same format as volume

    # @TODO: Finish me.
    units: # @see: https://en.wikibooks.org/wiki/Cookbook:Units_of_measurement
      type: # an enum of either weight, cups, scale. 
        $ref: '#/definitions/types/unit'
      unit:
        $ref: '#/definitions/types/unit/volume' # just an example.
    
    # formats: # Format tells you which parser should be used. 
    #   - plain # No parser
    #   - markdown # Use a markdown parser
    #   - html-simple # Only alow certain tags & attributes to be used
    #   - html-extended # Full HTML. Use with care.
    #   - rich # I can't remember, sorry
    #   - csv # comma separated

    # An enum of tool types.
    # tool:
    #   - equipment
    #   - hand tool
    #   - consumable

    # prep:
    #   - station
    #   - end-product
    #   - action
    #   - in-action

  # imageSizes: # An enum of sizes allowed. 
  #   - xl
  #   - l
  #   - medium
  #   - s
  #   - xs

  # description: 
  #   format: # Defaults to 'plain text'
  #     $ref: '#/definitions/types/formats'
  #   length: # Used on all formats but I think this will only be useful for plain text.
  #     max: # max character count
  #     min: # min character count
  #   external: # An external file/API to pull data. Low priority

  # # how much something costs
  # cost: 
  #   value: # Numerical value
  #   currency: # The currency type to know who to render
  
  # A recipe step. Describes everything required to execute a recipe from tools, ingredients,
  # description, images and text.
  step:
    type: step
    name: # "Blend eggs"
    tool: # A single tool that is used here
      $ref: '#/definitions/tool'
    time: 
    desc: # The step text. Maybe HTML, Markdown or favored flavor of text. Is not "external".
      $ref: '#/definitions/description'
    images: # Step images. Will most likely be a single image but can be a gallery for
            # multiple views of the same thing
      $ref: '#/definitions/description'
    timing: # A time estimate for when something is complete → https://t.ly/X5cw
            # It can be very helpful to your readers if you let them know how much time a
            # recipe will take to make. This can take the form of the total time or it can
            # be broken down into the preparation time, cooking time, and total time. It's
            # also good to call out if a part of the recipe will take a really long period
            # of time, such as marinating over night.
  
  # Only for organizing steps. Use sparingly.
  stepSection:
    type: section
    label: # A lable if to be shown
    desc: # some generic text
    steps: # child steps
      $ref: '#/definitions/instructions'
  
  # Can only ever be a child of a step
  stepTip:
    type: tip
    label: # A lable if to be shown
    desc: # some generic text. It is plain text for now.
    steps: # child steps
      $ref: '#/definitions/instructions'

  # A modifier for an ingrediant (for now at least)
  modifier: 
    id: # ingrediant id. Useful to build URLs, to keep using the same ingredients.
    text: # Plain text modifier text    

  # Use these and the renderer will reformat using the full word and pluralize.
  # Will find one that already exists so I don't have to type all these out manually.
  measurements:
    metric: 
      - oz: Ounce
      - lbs: Pounds
    imperial:
      - same: as-above

  # An array of ingredients used. Cannot use partials yet but it makes sense to do that here.
  ingredients: 
    - id: # Ingrediant id. @pattern → ingredient + 6 char hash
      name: # The ingredient name. Plain text.
      delta: # Order in which to show. Heavier (larger) numbers sink bottom, lighter float.
             # If delta is excluted then 0 is used. If none have a delta then they are all 
             #  0 and will show up in order that they are added.
             #  
             # Main use for delta anywhere in this schema is best for partials.
      units: # the chosen units, otherwise it uses the top level units
      amount: # Just a regular number of 
        $ref: '#/definitions/measurements'
      required: # If this ingredient is required
      alternate: # an alternate ingredient that could be used instead
      link: # An array of url links for this ingredient
      handling: # Instructions on how to handle the ingredient if required
      life: # How long it will ingrediant last.
      modifier: # A string (or ID) that is a modifier on the ingredient. For instance smashed, unsalted
                # granulated or powered. So when the ingredient is displayed it could, depending on 
                # the renderer, look like "Walnuts, crushed", "Milk, whole", "Cake Crumbs, dry", or
                # "Eggs, room temperature". This is super useful by keeping data normalized. The
                # other option is to put the modifier right into the name but this is less ideal.
        $ref: '#/definitions/modifier'
  
  # Low priority, just describe it
  equiptment: 
    - item:
      link:  # store link        
        pic: # A pic of the item if one exists
        store: [] # An array of store links
        description: # Description of the item
        brand: # The brand of this item. Not sure if I should include this.
        tutorial: [] # Links to tutorials of how to use the item
      preferred: # An array of author's preferred items
      alternates: # An array of alternates if preferred doesn't exist
        - item: 
          tutorial:
  
  # # Not required for recipes but rather the consumer of the recipe. Useful for organization.
  # taxonomies:
  #   tags: # An array of tags. Right now string, future they will be links.
  #   categories: # An array of categories but a limited amount (5 max)

  # A variation is a mixin that is used to change minor parts of a recipe but it "creates"
  # a new recipe based on the changes. Variations should be minimal changes not drastic
  # changes as that would be a whole new recipe.
  variations: 
    variants: 
      delta: # A number that determines when this variation will be applied to the recpie.
      key-name:
        prepTime: # any alterations to preptime. If prefaced with a dash symbol (-)
                  # then subtract time otherwise it defaults to additive time (+)
        - optional: true
        - desc: Lorem ipsum

  # All the properties required for a tool that is used in a recipe.
  tool: # $ref: https://schema.org/HowToTool
    name: # The name of the tool
    type: 
      $ref: '#/definitions/types/tool'
    alternateName: # Other names that this tool is known by
    quantity: # The amount required for this activity
    description: # A description of the tool
    image: # An image URL
    potentialAction: #Indicates a potential (ideal) Action
    url: # A store url
    tutorials: # A list of urls to a tutorial
    consumables: # Consumables for the tool required

  # mise en place
  # It should be noted that preparations could have tools in it as well.  
  preparations: # array of preps
    - name: # Or lifecycle. I can't decide or perhaps I'll allow for an alias?
      delta: # The order in which this prep work needs to be done. If not set it's the order
             # of the array
      type:
        $ref: '#/definitions/types/prep'
      space-needed:
      description: 
      images: # A list of images of what the prep should look like. Either the finished
              # product or how to setup the station
      tools: # An array of tools
        $ref: '#/definitions/tool'

  # # A configuration property to govern how components are supposed to be rendered.
  # # This is a render specific flag.
  # componentBehavior: 
  #   - merge # Merge makes the recipe one single recipe as if they aren't different recipes.
  #   - append # Append components so that each is created on their own. Typically viewed as sections.

  # A component is a recipe partial that adds (not changes) the recipe. This is just a 
  # simple way to create a recpie where there are multiple components that could be shared
  # between multiple recipes. For example a burger recipe (re: Example).
  # 
  # Components can also have variations in them making this the most complicated
  # partial. These do not have a preparations as that could be a problem to merge them
  # all.
  # 
  # Example:
  #   Burger recipie
  #     components
  #       - Bun
  #       - Burger
  #         - Sauce
  #       - Fries
  components: 
    behavior: 
      $ref: '#/definitions/componentBehavior'
    prepTime: # Any additional preptime required
    delta: # Controls the order of when a component is appended. This is important because some
           # components take a long time to prep (3 days marinade)
    recpie: 
      - 
    variations:
      $ref: '#/definitions/variations'
      variants: 
        key-name:
          - optional: true
          - desc: Lorem ipsum

  # A list of alterations that can/are applied to a recipe.
  # 
  # An alteration is an inline variation of a recipe meant to show a callout to a recipe reader. It
  # is not a variation as it's shown inline and isn't a "new recipe" whereas a variation is a new
  # recipe.
  # 
  # Alterations can be used in a few different ways as denoted by the types below.
  alterations:
    - type:
      $ref: '#/definitions/types/alterations'
      path: # The path to add the alteration if available.
      other-stuff: # Dunno what to do here yet

  # An array of steps, tips and sections.
  # 
  # Step →
  # Contains all the information needed to write a step. Can contain both tips and sections.
  # 
  # Tip →
  # Only ever a child node of step and this adds some extra insight into the recipe. Used
  # as a callout to the reader from the author.
  # 
  # Section →
  # Sections are only for grouping more steps. It is simply an organizational tool. This 
  # allows for deeper nesting and complex recipies but, again, this should be used
  # exceedingly sparingly. If sections are required think if you really need components
  # instead.
  # 
  # Example:
  # instructions:
  #   - step
  #     tip
  #   - step
  #   - step section
  #     - step
  #       tip
  #     - step
  #       tip
  #       - step section
  #         - step
  #           - step section
  #         - step
  instructions:
    - type: # can be of any type ⇉ [$refs → step | stepSection | stepTip]
        $ref: '#/definitions/types/instruction'
      text: 
        long:
          $ref: '#/definitions/description'
        short: # short text limited to an arbitrary 300 characters. Some chefs write
               # paragraphs which is great for a blog but professional chefs do not
               # need that and there are understood ways of working between teams
               # so short versions are useful.
      name: # Not required. A label for this step
      id: # A string key
      totalTime: # The total time for this step and all subsqeuent steps (add all times together).
      allConsumables: # Required for certain tools. re: Siphons require charges
      estimatedCost:
        $ref: '#/definitions/cost'
      step: 
        $ref: '#/definitions/step'
      techniques: # an array of URLs that link out to how to "do thing". Use these for sp
      tools: # A list of tools that would be used in here. This isn't required but should be added
             # to the calculated tools list.
      why: # A side note, a reasoning as to why a technique or instruction is happening. Also useful
           # to explain the chemistry if important.
        $ref: '#/definitions/description'  

  # image: 
  #   name: # The name of the image. Used for captions, alt, aria.
  #   description: # A description of the image. Used for captions, alt, aria.
  #     $ref: '#/definitions/description'
  #   published: # A publish date
  #   url: # A url to the FULL SIZED IMAGE
  #   location: # Address, basically text
  #   author: # Author name
  #     $ref: '#/definitions/person' # Most minimal structure I can get away with.
  #   sizes:  # If required, an array of image sizes can be supplied. These tell the consuming app
  #           # which sizes exist for the app to use. If this is excluded it is expected that the
  #           # main image is between XL && XXL size and the consuming app will create the
  #           # derivative images.
  #     $ref: '#/definitions/imageSizes'

  # link:
  #   text: # The text for the link
  #   url: # Outbound url
  #   desc: # A short plain text summary of this link.

  # # A noteable person for this recipe. Typically an author.
  # person:
  #   name: # The person's full name.
  #   url: # The person's personal URL
  #   headshot: # The person's headshot
  #   colleague: # Any notable colleagues
  #     - $ref: '#/definitions/person'
  #   contact: # Their contact info
  #     telephone: # Business telephone
  #     email: # Their email
  #   resturant: # Last known resturant they were employed/owned.
  #     name: # Name of the resturant
  #     title: # The person's title at the resturant (Owner, Head Chef, Wait Staff et al)
  #     address: # The address
  #     owner: # The owner's name if not this person.
  #     url: # The establishment's website.
